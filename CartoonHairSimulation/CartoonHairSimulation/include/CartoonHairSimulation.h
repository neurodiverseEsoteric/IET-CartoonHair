/*
-----------------------------------------------------------------------------
Filename:    CartoonHairSimulation.h
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.8.x Application Wizard for VC10 (May 2012)
      https://bitbucket.org/jacmoe/ogreappwizards
-----------------------------------------------------------------------------
*/

#include "stdafx.h"
#include "IdBufferRenderTargetListener.h"
#include "SkeletonDebug.h"
#include "HairMaterialListener.h"
#include "HairCompositorListener.h"

#ifndef __CartoonHairSimulation_h_
#define __CartoonHairSimulation_h_

class CartoonHairSimulation : public Ogre::FrameListener, public Ogre::WindowEventListener, public OIS::KeyListener, public OIS::MouseListener, OgreBites::SdkTrayListener
{
public:
    CartoonHairSimulation(void);
    virtual ~CartoonHairSimulation(void);

    void go(void);
	bool alterMarginsPressed(const CEGUI::EventArgs& e);
	bool rebuildMeshPressed(const CEGUI::EventArgs& e);

	bool blinnSpecularEnabled(const CEGUI::EventArgs& e);
	bool backlightingEnabled(const CEGUI::EventArgs& e);
	bool specularTextureEnabled(const CEGUI::EventArgs& e);
	bool hatchingEnabled(const CEGUI::EventArgs& e);
	bool simpleHatchingEnabled(const CEGUI::EventArgs& e);
	bool depthDetailEnabled(const CEGUI::EventArgs& e);
	bool fadeSilhouetteEnabled(const CEGUI::EventArgs& e);
	bool sobelSilhouetteEnabled(const CEGUI::EventArgs& e);
	bool showNormalsEnabled(const CEGUI::EventArgs& e);
	bool showHighlightEdgesEnabled(const CEGUI::EventArgs& e);
	bool showPhysicsEnabled(const CEGUI::EventArgs& e);
	bool showIDBufferEnabled(const CEGUI::EventArgs& e);
	bool showBonesEnabled(const CEGUI::EventArgs& e);
	bool angleScalingEnabled(const CEGUI::EventArgs& e);
	bool depthScalingEnabled(const CEGUI::EventArgs& e);

	bool blinnSChanged(const CEGUI::EventArgs& e);
	bool specularTextureSChanged(const CEGUI::EventArgs& e);
	bool backlightSChanged(const CEGUI::EventArgs& e);
	bool hatchingScaleChanged(const CEGUI::EventArgs& e);
	bool zMinChanged(const CEGUI::EventArgs& e);
	bool zScaleChanged(const CEGUI::EventArgs& e);
	bool colourChanged(const CEGUI::EventArgs& e);
	bool edgeStiffnessChanged(const CEGUI::EventArgs& e);
	bool bendingStiffnessChanged(const CEGUI::EventArgs& e);
	bool torsionStiffnessChanged(const CEGUI::EventArgs& e);
	bool anchorStiffnessChanged(const CEGUI::EventArgs& e);
	bool hairCurveChanged(const CEGUI::EventArgs& e);
	bool springCurveChanged(const CEGUI::EventArgs& e);
	bool edgeThresholdChanged(const CEGUI::EventArgs& e);
	bool dilationValuesChanged(const CEGUI::EventArgs& e);
	bool silhouetteStrokeScaleChanged(const CEGUI::EventArgs& e);
	bool silhouetteStrokeLimitChanged(const CEGUI::EventArgs& e);


protected:
    bool setup();
    bool configure(void);
    void chooseSceneManager(void);
    void createCamera(void);
    void createFrameListener(void);
	void createScene(void);
    void destroyScene(void);
    void createViewports(void);
    void setupResources(void);
    void createResourceListener(void);
    void loadResources(void);

	btMultiSphereShape *loadHeadShape(std::string filename);

    // Ogre::FrameListener
    virtual bool frameRenderingQueued(const Ogre::FrameEvent& evt);

    // OIS::KeyListener
    virtual bool keyPressed( const OIS::KeyEvent &arg );
    virtual bool keyReleased( const OIS::KeyEvent &arg );
    // OIS::MouseListener
    virtual bool mouseMoved( const OIS::MouseEvent &arg );
    virtual bool mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id );
    virtual bool mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id );

    // Ogre::WindowEventListener
    //Adjust mouse clipping area
    virtual void windowResized(Ogre::RenderWindow* rw);
    //Unattach OIS before window shutdown (very important under Linux)
    virtual void windowClosed(Ogre::RenderWindow* rw);

    Ogre::Root *mRoot;
    Ogre::Camera* mCamera;
    Ogre::SceneManager* mSceneMgr;
    Ogre::RenderWindow* mWindow;
    Ogre::String mResourcesCfg;
    Ogre::String mPluginsCfg;
	Ogre::CompositorChain *m_compositorChain;

	//gui variables
	CEGUI::OgreRenderer* m_renderer;
	CEGUI::Window *m_guiRoot;
	CEGUI::Checkbox *m_blinnSpecularBox, *m_specularTextureBox, *m_backlightingTextureBox, *m_depthDetailBox;
	CEGUI::Checkbox *m_animateHairBox, *m_animateSkeletonBox, *m_fadeSilhouetteBox, *m_sobelSilhouetteBox;
	CEGUI::Checkbox *m_normalsBox, *m_debugEdgesBox, *m_showPhysicsBox, *m_disablePhysicsBox, *m_showIdBufferBox;
	CEGUI::Checkbox *m_bonesBox, *m_hatchingBox, *m_simpleHatchingBox, *m_angleScalingBox, *m_depthScalingBox;
	CEGUI::MultiLineEditbox *m_zMinBox, *m_zScaleBox, *m_blinnSBox, *m_specTexSBox, *m_backlightSBox, *m_strokeScaleBox;
	CEGUI::MultiLineEditbox *m_redBox, *m_greenBox, *m_blueBox, *m_minMarginBox, *m_maxMarginBox;
	CEGUI::MultiLineEditbox *m_edgeStiffBox, *m_bendStiffBox, *m_torsionStiffBox, *m_anchorStiffBox;
	CEGUI::MultiLineEditbox *m_hairABox, *m_hairBBox, *m_hairCBox, *m_springABox, *m_springBBox, *m_springCBox;
	CEGUI::MultiLineEditbox *m_hairResolutionBox, *m_shapeResolutionBox , *m_edgeThresholdBox, *m_xDilationBox, *m_yDilationBox;
	CEGUI::MultiLineEditbox *m_silhouetteStrokeLimitBox, *m_silhouetteStrokeScaleBox;
	CEGUI::ButtonBase *m_alterMarginsButton, *m_rebuildMeshButton;

    // OgreBites
    OgreBites::SdkTrayManager* mTrayMgr;
    OgreBites::SdkCameraMan* mCameraMan;     // basic camera controller
    OgreBites::ParamsPanel* mDetailsPanel;   // sample details panel
    bool mCursorWasVisible;                  // was cursor visible before dialog appeared
    bool mShutDown;

    //OIS Input devices
    OIS::InputManager* mInputManager;
    OIS::Mouse*    mMouse;
    OIS::Keyboard* mKeyboard;

	//Bullet physics
	btSoftRigidDynamicsWorld *mWorld;
	btDispatcher *mDispatcher;
	btCollisionConfiguration *mCollisionConfig;
	btBroadphaseInterface *mBroadphase;
	btSequentialImpulseConstraintSolver *mConstraintSolver;
	btSoftBodySolver *mSoftBodySolver;

	int m_maxSubSteps;
	btScalar m_fixedTimeStep;


	//scene assets
	btRigidBody *m_headRigidBody;
	Ogre::SceneNode *m_headNode;
	Ogre::SceneNode *m_characterNode;
	Ogre::Bone *m_headBone;
	Ogre::Entity *m_character;
	Ogre::AnimationState *m_characterAnimationState;

	//spring materials
	btSoftBody::Material *m_edgeMaterial;
	btSoftBody::Material *m_bendingMaterial;
	btSoftBody::Material *m_torsionMaterial;
	btSoftBody::Material *m_anchorMaterial;

	//debug visualisation variables
	DebugDrawer *m_debugDrawer;
	SkeletonDebug *m_skeletonDrawer;

	//hair variables
	HairModel *m_hairModel;
	IdBufferRenderTargetListener *m_idBufferListener;
	HairMaterialListener *m_hairMaterialListener;
	HairCompositorListener *m_hairCompositorListener;

	bool m_cameraControl;
	bool m_firstTransformation;
	bool m_imageSpaceSilhouetteEnabled;

};

#endif // #ifndef __CartoonHairSimulation_h_
