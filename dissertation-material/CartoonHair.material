//references to the shader programs
vertex_program IETCartoonHair/ToonVertexShader glsl
{
	source toon.vert
}

fragment_program IETCartoonHair/ToonFragmentShader glsl
{
	source toon.frag
}

vertex_program IETCartoonHair/EdgeVertexShader glsl
{
	source edge.vert
}

fragment_program IETCartoonHair/EdgeFragmentShader glsl
{
	source edge.frag
}

vertex_program IETCartoonHair/SolidSilhouetteVertexShader glsl
{
	source solidedge.vert
}

fragment_program IETCartoonHair/SolidSilhouetteFragmentShader glsl
{
	source solidedge.frag
}

vertex_program IETCartoonHair/SobelVertexShader glsl
{
	source sobel.vert
}

fragment_program IETCartoonHair/SobelFragmentShader glsl
{
	source sobel.frag
}

vertex_program IETCartoonHair/DilationVertexShader glsl
{
	source dilation.vert
}

fragment_program IETCartoonHair/DilationFragmentShader glsl
{
	source dilation.frag
}

//simple black material based on http://www.ogre3d.org/tikiwiki/Materials#Solid_colour
material IETCartoonHair/BlackMaterial
{
	technique
	{
		pass
		{
			texture_unit
			{
				colour_op_ex source1 src_manual src_current 0 0 0
			}
		}
	}
}

//this is the material is used to texture the ID buffer preview quad that can be enabled in the debug menu
material IETCartoonHair/IdBufferMaterial
{
	technique
	{
		pass
		{
			lighting off
			
			texture_unit
			{
				texture idBuffer 2d
			}
		}
	}
}

//this is used by the hatching texture generator to determine what stroke image we will use as the basis for the hatching texture
material IETCartoonHair/TAMMaterial
{
	technique
	{
		pass
		{
			scene_blend modulate
			lighting off
			texture_unit
			{
				//replace the name of the texture with whatever base stroke you want to appear in the hatching texture
				texture edge2.png 2d
			}
		}
	}
}

//simple solid material shader used when applying ID colours
material IETCartoonHair/SolidMaterial
{
	technique
	{
		pass
		{
			lighting off
		}
	}
}

//simple solid material shader for use with silhouettes when rendering the ID buffer
material IETCartoonHair/SolidSilhouetteMaterial
{
	technique
	{
		pass
		{
			lighting off
			scene_blend alpha_blend
			cull_hardware none
			cull_software none
			
			vertex_program_ref IETCartoonHair/SolidSilhouetteVertexShader
			{
				param_named_auto modelViewProjectionMatrix worldviewproj_matrix
			}
			
			fragment_program_ref IETCartoonHair/SolidSilhouetteFragmentShader
			{
				param_named edgeTexture int 0
				//textureEnabled = 0 means the silhouette edge is not included in the ID buffer
				//1 means the silhouette edge is included
				param_named textureEnabled int 0
			}
			texture_unit 0
			{
				//set the texture name to the silhouette texture being used
				texture finaledge2.png 2d
				tex_address_mode wrap
				filtering trilinear
			}
		}
	}
}

material IETCartoonHair/EdgeMaterial
{
	//based on code from http://www.ogre3d.org/tikiwiki/Materials#Stained_Glass_Window
	technique
	{
		pass
		{	
			cull_hardware none
			cull_software none
			
			depth_check off
			scene_blend modulate
			
			vertex_program_ref IETCartoonHair/EdgeVertexShader
			{
				param_named_auto modelViewProjectionMatrix worldviewproj_matrix
				param_named_auto lightPos light_position 0
			}
			
			fragment_program_ref IETCartoonHair/EdgeFragmentShader
			{
				param_named edgeTexture int 0
				param_named idTexture int 1
				//ID buffer tolerance - in case of floating point error
				param_named range float 0.005
			}
			
			texture_unit 0
			{
				//set the texture name to the silhouette stroke you wish to use - don't forget to change the texture
				//name in the solid shader if you do that
				texture finaledge2.png 2d 0
				tex_address_mode wrap
				filtering none
			}
			
			texture_unit 1
			{
				//the ID buffer used to determine silhouette visiblity - do not change as it is set programmatically
				texture idBuffer 2d
				filtering none
			}
			
		}
	}
}

//dilation material for image-space silhouette detection compositor pass
material IETCartoonHair/Dilation
{
	technique
	{
		pass
		{
			vertex_program_ref IETCartoonHair/DilationVertexShader
			{
			
			}
			fragment_program_ref IETCartoonHair/DilationFragmentShader
			{
				param_named frameBuffer int 0
			}
			
			texture_unit
	        {
				tex_coord_set 0
				tex_address_mode clamp
				filtering none
	        }
		}
	}
}

//sobel material for image-space silhouette detection compositor pass
material IETCartoonHair/Sobel
{
	technique
	{
		pass
		{
			vertex_program_ref IETCartoonHair/SobelVertexShader
			{
			
			}
			fragment_program_ref IETCartoonHair/SobelFragmentShader
			{
				param_named frameBuffer int 0
			}
			
			texture_unit
	        {
				tex_coord_set 0
				tex_address_mode clamp
				filtering none
	        }
		}
	}
}

//this pass combines the dilation and original scene buffers together
//to produce the final image-space silhouette i
material IETCartoonHair/Composite
{
	technique
	{
		pass
		{
			texture_unit
	        {
				tex_coord_set 0
				tex_address_mode clamp
				filtering none
	        }
			texture_unit
			{
				tex_coord_set 0
				tex_address_mode clamp
				filtering none
			}
		}
	}
}

//Shin specular sampling highlight method material
material IETCartoonHair/HighlightMaterial
{
	technique
	{
		pass
		{
			cull_hardware none
			cull_software none
			
			//alot of experimentation is needed to get the visibility correct
			//depth_check off
			depth_bias 2000
			scene_blend alpha_blend
			
			texture_unit 0
			{
				//change the texture name to whatever highlight texture you want
				texture highlight.png 2d
				tex_address_mode wrap
				filtering none
			}
		}
	}
}

//the hair material - applies the cartoon shading, blinn specular, back lighting, depth dependent detail,
//hatching and so on
material IETCartoonHair/HairMaterial
{
    technique
    {
		pass
		{
			vertex_program_ref IETCartoonHair/ToonVertexShader
			{
				param_named_auto modelViewMatrix worldview_matrix
				param_named_auto modelViewProjectionMatrix worldviewproj_matrix
				param_named_auto cameraPosition camera_position
				param_named_auto lightPos light_position 0
				param_named strokeS
			}
			
			fragment_program_ref IETCartoonHair/ToonFragmentShader
			{
				param_named cartoonTexture int 0
				param_named stroke1 int 1
				param_named stroke2 int 2
				param_named stroke3 int 3
				param_named stroke4 int 4
				param_named stroke5 int 5
				param_named stroke6 int 6
				param_named specularTexture int 7
				param_named backlightingTexture int 8
			}
			
			//the 2D depth-dependent cartoon shading texture
			texture_unit 0
			{
				texture cartoon2d.png 2d
				tex_address_mode clamp
				filtering none
			}
			
			//texture_unit 1 to 6 are the hatching texture samplers - they need to be dds format for custom mipmaps
			//to work
			texture_unit 1
			{
				texture stroke0.dds 2d
				tex_address_mode wrap
				filtering none
			}
			texture_unit 2
			{
				texture stroke1.dds 2d
				tex_address_mode wrap
				filtering none
			}
			texture_unit 3
			{
				texture stroke2.dds 2d
				tex_address_mode wrap
				filtering none
			}
			texture_unit 4
			{
				texture stroke3.dds 2d
				tex_address_mode wrap
				filtering none
			}
			texture_unit 5
			{
				texture stroke4.dds 2d
				tex_address_mode wrap
				filtering none
			}
			texture_unit 6
			{
				texture stroke5.dds 2d
				tex_address_mode wrap
				filtering none
			}
			
			//2D custom specular response texture
			texture_unit 7
			{
				texture cartoonSpecular.png 2d
				tex_address_mode clamp
				filtering none
			}
			
			//2D custom back light response texture
			texture_unit 8
			{
				texture cartoonBacklighting.png
				tex_address_mode clamp
				filtering none
			}
		}
	}
}